#
# Database Management
#
# This workflow runs for all changes on `master`. It takes the manifests from
# a checkout, prepares them, and then commits them to the `db` branch. This
# allows us to run automated steps for all manifests before they are committed
# to the `db` branch.
#
# Note that multiple instances of this workflow can run in parallel. Therefore,
# we trigger a rerun if a push fails due to conflicts.
#

name: "Database Management"

on:
  push:
    branches:
    - master

jobs:
  inspect:
    name: "Event Inspection"
    runs-on: ubuntu-latest
    outputs:
      msrcs: ${{ steps.inspect.outputs.msrcs }}
      n_msrcs: ${{ steps.inspect.outputs.n_msrcs }}
    steps:
    - name: "Clone Repository"
      uses: actions/checkout@v2
      with:
        ref: master
    - name: "Inspect Pull Request Event"
      id: inspect
      run: |
        MSRCS="$(make --silent mlist-msrc-diff 'MSRC_TOKEN=${{github.token}}')"
        N_MSRCS="$(echo "${MSRCS}" | jq -c '. | length')"

        if [[ "${N_MSRCS}" = "0" ]] ; then
          MSRCS='["<dummy>"]'
          N_MSRCS=1
        fi

        echo "::set-output name=msrcs::${MSRCS}"
        echo "::set-output name=n_msrcs::${N_MSRCS}"
    - name: "Print Variables"
      run: |
        echo 'n_msrcs: ${{ steps.inspect.outputs.n_msrcs }}'
    - name: "Print Variables (msrcs)"
      run: |
        echo '${{ steps.inspect.outputs.msrcs }}' | jq .

  msrc:
    name: "Prefetch Sources"
    if: github.repository == 'osbuild/manifestdb'
    runs-on: ubuntu-latest
    needs: inspect
    strategy:
      fail-fast: false
      matrix:
        manifest: ${{ fromJson(needs.inspect.outputs.msrcs) }}
    steps:
    - name: "Clone Repository"
      uses: actions/checkout@v2
      with:
        ref: master
    - name: "Prefetch and Store Sources"
      if: matrix.manifest != '<dummy>'
      uses: osbuild/containers/src/actions/ghci-osbuild@v1
      with:
        image: docker.pkg.github.com/osbuild/containers/ghci-manifestdb:v1
        run: |
          docker login docker.pkg.github.com -u '${{github.actor}}' -p '${{github.token}}'
          make msrc-push 'MANIFEST=${{matrix.manifest}}'

  db:
    name: "Push Database"
    if: github.repository == 'osbuild/manifestdb'
    runs-on: ubuntu-latest
    needs: msrc
    steps:
    - name: "Configure GIT"
      run: |
        git config --global user.name "Automation"
        git config --global user.email "automation@osbuild.org"
    - name: "Clone Repository"
      uses: actions/checkout@v2
      with:
        ref: master
        path: "repo"
    - name: "Clone Database"
      uses: actions/checkout@v2
      with:
        ref: db
        path: "db"
    - name: "Copy Database"
      run: |
        rm -rf "./db/manifests" "./db/test"
        cp -r "./repo/manifests" "./repo/test" "./db/"
    - name: "Commit Database"
      working-directory: "db"
      run: |
        git add --all .
        git commit -m "db: synchronize" || echo "Nothing changed."
    - name: "Push Database"
      env:
        OSBUILT_REPO_PAT: ${{secrets.OSBUILT_REPO_PAT}}
        REPOSITORY: ${{github.repository}}
        RUN_ID: ${{github.run_id}}
      working-directory: "db"
      run: |
        if git push --porcelain origin db 2>/dev/null ; then
          echo "Push succeeded"
        else
          echo "Push failed, restart triggered"
          curl \
            --data '{"event_type":"restart","client_payload":{"run_id":"'"${RUN_ID}"'"}}' \
            --fail \
            --header "Content-Type: application/json" \
            --user "osbuilt:${OSBUILT_REPO_PAT}" \
            --verbose \
            "https://api.github.com/repos/${REPOSITORY}/dispatches"
        fi
