#
# PR Management
#
# This workflow runs on every Pull-Request. It tries to minimize the amount of
# inspection we have to do on the manifest database. Therefore, for every PR
# it calculates the manifests that were modified by the PR and then runs checks
# and maintenance work on those.
#

name: "PR Management"

on: [pull_request]

jobs:
  inspect:
    name: "Event Inspection"
    runs-on: ubuntu-latest
    outputs:
      manifests: ${{ steps.inspect.outputs.manifests }}
      n_manifests: ${{ steps.inspect.outputs.n_manifests }}
    steps:
    - name: "Clone Repository"
      uses: actions/checkout@v2
      with:
        ref: ${{github.event.pull_request.head.sha}}
    - name: "Fetch Base Commit"
      run: git fetch origin '${{github.event.pull_request.base.sha}}'
    - name: "Inspect Pull Request Event"
      id: inspect
      run: |
        BASE_REF='${{github.event.pull_request.base.sha}}'
        HEAD_REF='${{github.event.pull_request.head.sha}}'
        MANIFESTS="$(make --silent mlist-checksum-diff "MLIST_A=${BASE_REF}" "MLIST_B=${HEAD_REF}")"
        N_MANIFESTS="$(echo "${MANIFESTS}" | jq -c '. | length')"

        echo "::set-output name=manifests::${MANIFESTS}"
        echo "::set-output name=n_manifests::${N_MANIFESTS}"
    - name: "Print Variables"
      run: |
        echo 'n_manifests: ${{ steps.inspect.outputs.n_manifests }}'
    - name: "Print Variables (manifests)"
      run: |
        echo '${{ steps.inspect.outputs.manifests }}' | jq .

  msrc:
    name: "Prefetch Sources"
    if: needs.inspect.outputs.n_manifests != 0
    runs-on: ubuntu-latest
    needs: inspect
    strategy:
      fail-fast: false
      matrix:
        manifest: ${{ fromJson(needs.inspect.outputs.manifests) }}
    steps:
    - name: "Clone Repository"
      uses: actions/checkout@v2
    - name: "Prefetch Manifest Sources"
      uses: osbuild/containers/src/actions/ghci-osbuild@v1
      with:
        image: docker.pkg.github.com/osbuild/containers/ghci-manifestdb:v1
        run: make msrc-prefetch 'MANIFEST=${{ matrix.manifest }}'

  upload:
    name: "Upload Manifest Artifact"
    runs-on: ubuntu-latest
    needs: inspect
    steps:
    - name: "Clone Repository"
      uses: actions/checkout@v2
    - name: "Preprocess Manifests"
      uses: osbuild/containers/src/actions/ghci-osbuild@v1
      with:
        image: docker.pkg.github.com/osbuild/containers/ghci-manifestdb:v1
        run: make mpp
    - name: "Upload Artifact"
      uses: actions/upload-artifact@v2
      with:
        name: manifests
        path: manifests/
